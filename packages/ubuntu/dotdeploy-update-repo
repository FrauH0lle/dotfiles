#!/usr/bin/env bash

# Adapted from https://askubuntu.com/a/772636

cd /var/local/dotdeploy/repo || exit 1

# Generate the Packages file
dpkg-scanpackages . /dev/null > Packages
gzip --keep --force -9 Packages

# Generate the Release file
cat <<EOF >> Release
Origin: Dotdeploy_Local_Repo
Label: Dotdeploy_Local_Repo
Codename: jammy
Architectures: amd64
Components: main
Description: Dotdeploy local APT repository
EOF

{
    # The Date: field has the same format as the Debian package changelog
    # entries, that is, RFC 2822 with time zone +0000
    echo -e "Date: $(LANG=C date -Ru)"

    # Release must contain MD5 sums of all repository files (in a simple
    # repo just the Packages and Packages.gz files)
    echo -e "MD5Sum:"
    printf " $(md5sum Packages.gz | cut --delimiter=' ' --fields=1) %16d Packages.gz" "$(wc --bytes Packages.gz | cut --delimiter=' ' --fields=1)"
    printf "\n $(md5sum Packages | cut --delimiter=' ' --fields=1) %16d Packages" "$(wc --bytes Packages | cut --delimiter=' ' --fields=1)"

    # Release must contain SHA256 sums of all repository files (in a simple
    # repo just the Packages and Packages.gz files)
    echo -e "\nSHA256:"
    printf " $(sha256sum Packages.gz | cut --delimiter=' ' --fields=1) %16d Packages.gz" "$(wc --bytes Packages.gz | cut --delimiter=' ' --fields=1)"
    printf "\n $(sha256sum Packages | cut --delimiter=' ' --fields=1) %16d Packages" "$(wc --bytes Packages | cut --delimiter=' ' --fields=1)"
} >> Release

# NOTE 2024-01-10: Maybe uncomment this to sign the repository. This would
# require a proper GPG setup.
# Clearsign the Release file (that is, sign it without encrypting it)
# gpg --clearsign --digest-algo SHA512 --local-user $USER -o InRelease Release
# Release.gpg only need for older apt versions
# gpg -abs --digest-algo SHA512 --local-user $USER -o Release.gpg Release

# Get apt to see the changes
sudo apt-get -q update
