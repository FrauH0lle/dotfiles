# Increasing the size of the receive queue. The received frames will be stored
# in this queue after taking them from the ring buffer on the network card.
# Increasing this value for high speed cards may help prevent losing packets:
net.core.netdev_max_backlog = 16384

# Increase the maximum connections
# The upper limit on how many connections the kernel will accept (default 128):
net.core.somaxconn = 8192

# Increase the memory dedicated to the network interfaces. The default the Linux
# network stack is not configured for high speed large file transfer across WAN
# links (i.e. handle more network packets) and setting the correct values may
# save memory resources:
net.core.rmem_default = 1048576
net.core.rmem_max = 16777216
net.core.wmem_default = 1048576
net.core.wmem_max = 16777216
net.core.optmem_max = 65536
# These settings are taken from
# https://blog.cloudflare.com/optimizing-tcp-for-high-throughput-and-low-latency/
net.ipv4.tcp_rmem = 8192 262144 536870912
net.ipv4.tcp_wmem = 4096 16384 536870912
net.ipv4.tcp_adv_win_scale = -2
# tcp_collapse_max_bytes requires a kernel patch from
# https://github.com/cloudflare/linux/blob/master/patches/0014-add-a-sysctl-to-enable-disable-tcp_collapse-logic.patch
net.ipv4.tcp_collapse_max_bytes = 6291456
net.ipv4.tcp_notsent_lowat = 131072

net.ipv4.udp_rmem_min = 8192
net.ipv4.udp_wmem_min = 8192

# Enable TCP Fast Open TCP Fast Open is an extension to the transmission control
# protocol (TCP) that helps reduce network latency by enabling data to be
# exchanged during the senderâ€™s initial TCP SYN [3]. Using the value 3 instead
# of the default 1 allows TCP Fast Open for both incoming and outgoing
# connections:
net.ipv4.tcp_fastopen = 3

# Enable BBR
# The BBR congestion control algorithm can help achieve higher bandwidths and
# lower latencies for internet traffic
net.core.default_qdisc = cake
net.ipv4.tcp_congestion_control = bbr

# TCP SYN cookie protection
#
# Helps protect against SYN flood attacks. Only kicks in when
# net.ipv4.tcp_max_syn_backlog is reached:
net.ipv4.tcp_syncookies = 1

# Protect against tcp time-wait assassination hazards, drop RST packets for
# sockets in the time-wait state. Not widely supported outside of Linux, but
# conforms to RFC:
net.ipv4.tcp_rfc1337 = 1

# By enabling reverse path filtering, the kernel will do source validation of
# the packets received from all the interfaces on the machine. This can protect
# from attackers that are using IP spoofing methods to do harm.
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1

# Disable ICMP redirects
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
# Disable ICMP redirect sending when on a non router
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0

